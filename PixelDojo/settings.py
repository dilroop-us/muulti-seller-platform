"""
Django settings for PixelDojo project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import boto3
from stripe.api_resources.climate import order


# AWS SSM Client
ssm_client = boto3.client("ssm", region_name="us-east-1")

def get_ssm_parameter(name, is_secure=False):
    """Fetch parameter from AWS SSM Parameter Store"""
    response = ssm_client.get_parameter(Name=name, WithDecryption=is_secure)
    return response["Parameter"]["Value"]


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = config("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

DJANGO_APPS = [

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.sites',

]

THIRD_PARTY_APPS = [
    "allauth",
    "allauth.account",
    'crispy_forms',
    'crispy_tailwind',
    "django_redis",
    "django_celery_results",
    "django_celery_beat",
    "tailwind",
    "theme",
    "django_browser_reload",
    'django_countries',
    'django_extensions',
    'treebeard',
    'storages',
]


LOCAL_APPS = [
    "core",
    "customer",
    "seller",
    "custom_admin",
    "products",
    "cart",
    "checkout",
    "payment",
    "wishlist",
    "seller_payments",
    "subscription",
    "orders",
    "reviews",
    "coupons",

]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

SITE_ID = 1

TAILWIND_APP_NAME = "theme"

AUTHENTICATION_BACKENDS = [
    "allauth.account.auth_backends.AuthenticationBackend",  # Allauth authentication
    "django.contrib.auth.backends.ModelBackend",
]

AUTH_USER_MODEL = "core.CustomUser"
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "none"
LOGIN_REDIRECT_URL = "/customer/profile/"
LOGOUT_REDIRECT_URL = "/"

ACCOUNT_FORMS = {
    "signup": "customer.forms.CustomerSignupForm",
}


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "pixel.dojo.store@gmail.com"
EMAIL_HOST_PASSWORD = "iqkfhicofnxthewd "
DEFAULT_FROM_EMAIL = "PixelDojo - pixel.dojo.store@gmail.com"

ADMIN_EMAIL = "pixel.dojo.store@gmail.com"  # Email where messages will be sent

NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'seller.middlewares.RestrictSellerAccessMiddleware',
]

DOMAIN = "http://127.0.0.1:8000"

SITE_URL = DOMAIN

ROOT_URLCONF = 'PixelDojo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart_item_count',
                'products.context_processors.parent_categories',
            ],
        },
    },
]

CRISPY_ALLOWED_TEMPLATE_PACKS = 'tailwind'

CRISPY_TEMPLATE_PACK = 'tailwind'

WSGI_APPLICATION = 'PixelDojo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": config("DATABASE_NAME"),
#         "USER": config("DATABASE_USER"),
#         "PASSWORD": config("DATABASE_PASSWORD"),
#         "HOST": config("DATABASE_HOST", default="localhost"),
#         "PORT": config("DATABASE_PORT", default="5432"),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_ssm_parameter('/projects/pixeldojo/DB_NAME'),
        'USER': get_ssm_parameter('/projects/pixeldojo/DB_USER'),
        'PASSWORD': get_ssm_parameter('/projects/pixeldojo/DB_PASSWORD', is_secure=True),
        'HOST': get_ssm_parameter('/projects/pixeldojo/DB_HOST'),
        'PORT': get_ssm_parameter('/projects/pixeldojo/DB_PORT'),
    }
}

# ✅ Use S3 for Static & Media Files
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# ✅ S3 Bucket Configuration
AWS_ACCESS_KEY_ID = get_ssm_parameter("/projects/pixeldojo/AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = get_ssm_parameter("/projects/pixeldojo/AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = get_ssm_parameter("/projects/pixeldojo/AWS_STORAGE_BUCKET_NAME")
AWS_REGION_NAME = get_ssm_parameter("/projects/pixeldojo/AWS_S3_REGION_NAME")

# ✅ S3 Custom Domain
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

# ✅ Static & Media URLs (Served from S3)
STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"


# ✅ Local Storage for collectstatic (Temporary)
if os.getenv("USE_LOCAL_STATIC"):
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


REDIS_HOST = "127.0.0.1"
REDIS_PORT = 6380
REDIS_DB = 0

REDIS_CART_PREFIX = "cart:"

# Redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": config("REDIS_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_TIMEOUT": 5,
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
        },
        "TIMEOUT": 300,  # Cache timeout in seconds
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# SESSION_COOKIE_AGE = 1800  # 30 minutes
# SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session active after closing browser

CELERY_BROKER_URL = config("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = config("CELERY_RESULT_BACKEND")

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = '/static/'

# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# # (Optional) Define where Django looks for additional static files
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),  # If you have a static/ folder in your project
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

COUNTRIES_ONLY = ['US', 'CA']


STRIPE_PUBLIC_KEY = config("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET")
STRIPE_CLIENT_ID = config("STRIPE_CLIENT_ID")

